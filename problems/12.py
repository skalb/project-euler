'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the divisors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

from math import sqrt
from triangle_numbers import triangle_number

if __name__ == '__main__':
    triangle_numbers = triangle_number()
    t = triangle_numbers.next()
    divisors = 0
    while divisors <= 500:
        t = triangle_numbers.next()
        
        divisor_bound = int(sqrt(t)) + 1
        
        # Since divisors come in pairs, we can just find all the divisors <= sqrt(t)
        divisors = len([n for n in xrange(1, divisor_bound, 1) if t % n == 0]) * 2
        
    print t
        
        
    